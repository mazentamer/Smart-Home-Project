
FinalProject_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000580  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00000580  00000614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a4  008000a4  00000658  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000167b  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bd  00000000  00000000  00001e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0c  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00003368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cc  00000000  00000000  000035c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000508  00000000  00000000  00003b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3a       	cpi	r26, 0xA5	; 165
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 be 02 	jmp	0x57c	; 0x57c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

uint8_t dataRec = 0; //variable that will have the value sent from the master using SPI communication

int main(void)
{
    SPI_Init(); //SPI Initialized as slave (as shown in configuration file of the SPI)
  92:	0e 94 af 02 	call	0x55e	; 0x55e <SPI_Init>
	LCD_Init(); //LCD Initialized to show user the command chosen
  96:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Init>
	LED0_Initialize(); 
  9a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LED0_Initialize>
	LED1_Initialize();
  9e:	0e 94 83 01 	call	0x306	; 0x306 <LED1_Initialize>
	LED2_Initialize(); // All the leds used for testing the successful transmission of data
  a2:	0e 94 8e 01 	call	0x31c	; 0x31c <LED2_Initialize>
	LCD_CLEAR();
  a6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_CLEAR>
    while (1) 
    {
		dataRec = SPI_Recieve();
  aa:	0e 94 b9 02 	call	0x572	; 0x572 <SPI_Recieve>
  ae:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>

		switch (dataRec)
  b2:	81 33       	cpi	r24, 0x31	; 49
  b4:	49 f0       	breq	.+18     	; 0xc8 <main+0x36>
  b6:	18 f4       	brcc	.+6      	; 0xbe <main+0x2c>
  b8:	88 23       	and	r24, r24
  ba:	39 f1       	breq	.+78     	; 0x10a <main+0x78>
  bc:	2d c0       	rjmp	.+90     	; 0x118 <main+0x86>
  be:	82 33       	cpi	r24, 0x32	; 50
  c0:	71 f0       	breq	.+28     	; 0xde <main+0x4c>
  c2:	83 33       	cpi	r24, 0x33	; 51
  c4:	b9 f0       	breq	.+46     	; 0xf4 <main+0x62>
  c6:	28 c0       	rjmp	.+80     	; 0x118 <main+0x86>
		{
			case '1':		//If sent data was 1 in ASCII led 0 will be toggled
				LCD_CLEAR();
  c8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_CLEAR>
				LCD_WRITE_STR("LED-0 Toggle");
  cc:	80 e6       	ldi	r24, 0x60	; 96
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_WRITE_STR>
				LED0_Toggle();
  d4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LED0_Toggle>
				dataRec = 0;
  d8:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end>
				break;
  dc:	e6 cf       	rjmp	.-52     	; 0xaa <main+0x18>
			case '2':		//If sent data was 2 in ASCII led 1 will be toggled
				LCD_CLEAR();
  de:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_CLEAR>
				LCD_WRITE_STR("LED-1 Toggle");
  e2:	8d e6       	ldi	r24, 0x6D	; 109
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_WRITE_STR>
				LED1_Toggle();
  ea:	0e 94 89 01 	call	0x312	; 0x312 <LED1_Toggle>
				dataRec = 0;
  ee:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end>
				break;
  f2:	db cf       	rjmp	.-74     	; 0xaa <main+0x18>
			case '3':		//If sent data was 3 in ASCII led 2 will be toggled
				LCD_CLEAR();
  f4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_CLEAR>
				LCD_WRITE_STR("LED-2 Toggle");
  f8:	8a e7       	ldi	r24, 0x7A	; 122
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_WRITE_STR>
				LED2_Toggle();
 100:	0e 94 94 01 	call	0x328	; 0x328 <LED2_Toggle>
				dataRec = 0;
 104:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end>
				break;
 108:	d0 cf       	rjmp	.-96     	; 0xaa <main+0x18>
			case 0:
				LCD_CLEAR();
 10a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_CLEAR>
				LCD_WRITE_STR("NO DATA SENT");
 10e:	87 e8       	ldi	r24, 0x87	; 135
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_WRITE_STR>
				break;
 116:	c9 cf       	rjmp	.-110    	; 0xaa <main+0x18>
			default:
				LCD_CLEAR();
 118:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_CLEAR>
				LCD_WRITE_STR("Wrong Command!");
 11c:	84 e9       	ldi	r24, 0x94	; 148
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_WRITE_STR>
				break;
 124:	c2 cf       	rjmp	.-124    	; 0xaa <main+0x18>

00000126 <LCD_WRITE_CMD>:
void LCD_WRITE_NBR(uint32_t numbr)
{
	uint8_t num[10];
	ltoa(numbr, (uint8_t*)num, 10);//Long to Ascii
	LCD_WRITE_STR(num);
}
 126:	cf 93       	push	r28
 128:	c8 2f       	mov	r28, r24
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	63 e0       	ldi	r22, 0x03	; 3
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 148:	8b b3       	in	r24, 0x1b	; 27
 14a:	9c 2f       	mov	r25, r28
 14c:	90 7f       	andi	r25, 0xF0	; 240
 14e:	8f 70       	andi	r24, 0x0F	; 15
 150:	89 2b       	or	r24, r25
 152:	8b bb       	out	0x1b, r24	; 27
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	63 e0       	ldi	r22, 0x03	; 3
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 15e:	8f e9       	ldi	r24, 0x9F	; 159
 160:	9f e0       	ldi	r25, 0x0F	; 15
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_WRITE_CMD+0x3c>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_WRITE_CMD+0x42>
 168:	00 00       	nop
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	63 e0       	ldi	r22, 0x03	; 3
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 174:	2b b3       	in	r18, 0x1b	; 27
 176:	30 e1       	ldi	r19, 0x10	; 16
 178:	c3 9f       	mul	r28, r19
 17a:	c0 01       	movw	r24, r0
 17c:	11 24       	eor	r1, r1
 17e:	92 2f       	mov	r25, r18
 180:	9f 70       	andi	r25, 0x0F	; 15
 182:	89 2b       	or	r24, r25
 184:	8b bb       	out	0x1b, r24	; 27
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	63 e0       	ldi	r22, 0x03	; 3
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 190:	8f e9       	ldi	r24, 0x9F	; 159
 192:	9f e0       	ldi	r25, 0x0F	; 15
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_WRITE_CMD+0x6e>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_WRITE_CMD+0x74>
 19a:	00 00       	nop
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	63 e0       	ldi	r22, 0x03	; 3
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 1a6:	8f e3       	ldi	r24, 0x3F	; 63
 1a8:	9f e1       	ldi	r25, 0x1F	; 31
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_WRITE_CMD+0x84>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_WRITE_CMD+0x8a>
 1b0:	00 00       	nop
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <LCD_Init>:
 1b6:	41 e0       	ldi	r20, 0x01	; 1
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 99 01 	call	0x332	; 0x332 <DIO_SetPin_Direction>
 1c0:	41 e0       	ldi	r20, 0x01	; 1
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 99 01 	call	0x332	; 0x332 <DIO_SetPin_Direction>
 1ca:	41 e0       	ldi	r20, 0x01	; 1
 1cc:	63 e0       	ldi	r22, 0x03	; 3
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 99 01 	call	0x332	; 0x332 <DIO_SetPin_Direction>
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	64 e0       	ldi	r22, 0x04	; 4
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 99 01 	call	0x332	; 0x332 <DIO_SetPin_Direction>
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	65 e0       	ldi	r22, 0x05	; 5
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 99 01 	call	0x332	; 0x332 <DIO_SetPin_Direction>
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	66 e0       	ldi	r22, 0x06	; 6
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 99 01 	call	0x332	; 0x332 <DIO_SetPin_Direction>
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	67 e0       	ldi	r22, 0x07	; 7
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 99 01 	call	0x332	; 0x332 <DIO_SetPin_Direction>
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	81 ee       	ldi	r24, 0xE1	; 225
 200:	94 e0       	ldi	r25, 0x04	; 4
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <LCD_Init+0x4c>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_Init+0x56>
 20c:	00 00       	nop
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WRITE_CMD>
 214:	83 e3       	ldi	r24, 0x33	; 51
 216:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WRITE_CMD>
 21a:	82 e3       	ldi	r24, 0x32	; 50
 21c:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WRITE_CMD>
 220:	88 e2       	ldi	r24, 0x28	; 40
 222:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WRITE_CMD>
 226:	8c e0       	ldi	r24, 0x0C	; 12
 228:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WRITE_CMD>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WRITE_CMD>
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WRITE_CMD>
 238:	08 95       	ret

0000023a <LCD_WRITE_DTA>:
 23a:	cf 93       	push	r28
 23c:	c8 2f       	mov	r28, r24
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	62 e0       	ldi	r22, 0x02	; 2
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 25c:	8b b3       	in	r24, 0x1b	; 27
 25e:	9c 2f       	mov	r25, r28
 260:	90 7f       	andi	r25, 0xF0	; 240
 262:	8f 70       	andi	r24, 0x0F	; 15
 264:	89 2b       	or	r24, r25
 266:	8b bb       	out	0x1b, r24	; 27
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	63 e0       	ldi	r22, 0x03	; 3
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 272:	8f e9       	ldi	r24, 0x9F	; 159
 274:	9f e0       	ldi	r25, 0x0F	; 15
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_WRITE_DTA+0x3c>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_WRITE_DTA+0x42>
 27c:	00 00       	nop
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	63 e0       	ldi	r22, 0x03	; 3
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 288:	2b b3       	in	r18, 0x1b	; 27
 28a:	30 e1       	ldi	r19, 0x10	; 16
 28c:	c3 9f       	mul	r28, r19
 28e:	c0 01       	movw	r24, r0
 290:	11 24       	eor	r1, r1
 292:	92 2f       	mov	r25, r18
 294:	9f 70       	andi	r25, 0x0F	; 15
 296:	89 2b       	or	r24, r25
 298:	8b bb       	out	0x1b, r24	; 27
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 2a4:	8f e9       	ldi	r24, 0x9F	; 159
 2a6:	9f e0       	ldi	r25, 0x0F	; 15
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_WRITE_DTA+0x6e>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_WRITE_DTA+0x74>
 2ae:	00 00       	nop
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_SetPin_State>
 2ba:	8f e3       	ldi	r24, 0x3F	; 63
 2bc:	9f e1       	ldi	r25, 0x1F	; 31
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_WRITE_DTA+0x84>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_WRITE_DTA+0x8a>
 2c4:	00 00       	nop
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_WRITE_STR>:
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ec 01       	movw	r28, r24
 2d0:	88 81       	ld	r24, Y
 2d2:	88 23       	and	r24, r24
 2d4:	31 f0       	breq	.+12     	; 0x2e2 <LCD_WRITE_STR+0x18>
 2d6:	21 96       	adiw	r28, 0x01	; 1
 2d8:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_WRITE_DTA>
 2dc:	89 91       	ld	r24, Y+
 2de:	81 11       	cpse	r24, r1
 2e0:	fb cf       	rjmp	.-10     	; 0x2d8 <LCD_WRITE_STR+0xe>
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <LCD_CLEAR>:
void LCD_CLEAR(void)/*Clear data display on screen*/
{
	LCD_WRITE_CMD(0x01);
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 93 00 	call	0x126	; 0x126 <LCD_WRITE_CMD>
 2ee:	08 95       	ret

000002f0 <LED0_Initialize>:

}

void LED2_OFF (void)
{
	DIO_SetPin_State (LED2_PRT , LED2 , LED_LOW);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	0e 94 99 01 	call	0x332	; 0x332 <DIO_SetPin_Direction>
 2fa:	08 95       	ret

000002fc <LED0_Toggle>:
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_TglPin_State>
 304:	08 95       	ret

00000306 <LED1_Initialize>:
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	67 e0       	ldi	r22, 0x07	; 7
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	0e 94 99 01 	call	0x332	; 0x332 <DIO_SetPin_Direction>
 310:	08 95       	ret

00000312 <LED1_Toggle>:
 312:	67 e0       	ldi	r22, 0x07	; 7
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_TglPin_State>
 31a:	08 95       	ret

0000031c <LED2_Initialize>:
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	0e 94 99 01 	call	0x332	; 0x332 <DIO_SetPin_Direction>
 326:	08 95       	ret

00000328 <LED2_Toggle>:
}

void LED2_Toggle (void)
{
	DIO_TglPin_State(LED2_PRT , LED2);
 328:	63 e0       	ldi	r22, 0x03	; 3
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_TglPin_State>
 330:	08 95       	ret

00000332 <DIO_SetPin_Direction>:

#include "DIO.h"

void DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_Direction direction)
{
	switch (direction)
 332:	44 23       	and	r20, r20
 334:	19 f0       	breq	.+6      	; 0x33c <DIO_SetPin_Direction+0xa>
 336:	41 30       	cpi	r20, 0x01	; 1
 338:	c9 f1       	breq	.+114    	; 0x3ac <DIO_SetPin_Direction+0x7a>
 33a:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	91 f0       	breq	.+36     	; 0x364 <DIO_SetPin_Direction+0x32>
 340:	28 f0       	brcs	.+10     	; 0x34c <DIO_SetPin_Direction+0x1a>
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	d9 f0       	breq	.+54     	; 0x37c <DIO_SetPin_Direction+0x4a>
 346:	83 30       	cpi	r24, 0x03	; 3
 348:	29 f1       	breq	.+74     	; 0x394 <DIO_SetPin_Direction+0x62>
 34a:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
 34c:	2a b3       	in	r18, 0x1a	; 26
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_SetPin_Direction+0x26>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_SetPin_Direction+0x22>
 35c:	80 95       	com	r24
 35e:	82 23       	and	r24, r18
 360:	8a bb       	out	0x1a, r24	; 26
			break;
 362:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
 364:	27 b3       	in	r18, 0x17	; 23
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_SetPin_Direction+0x3e>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_SetPin_Direction+0x3a>
 374:	80 95       	com	r24
 376:	82 23       	and	r24, r18
 378:	87 bb       	out	0x17, r24	; 23
			break;
 37a:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
 37c:	24 b3       	in	r18, 0x14	; 20
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_SetPin_Direction+0x56>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_SetPin_Direction+0x52>
 38c:	80 95       	com	r24
 38e:	82 23       	and	r24, r18
 390:	84 bb       	out	0x14, r24	; 20
			break;
 392:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 394:	21 b3       	in	r18, 0x11	; 17
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_SetPin_Direction+0x6e>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_SetPin_Direction+0x6a>
 3a4:	80 95       	com	r24
 3a6:	82 23       	and	r24, r18
 3a8:	81 bb       	out	0x11, r24	; 17
			break;
 3aa:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	89 f0       	breq	.+34     	; 0x3d2 <DIO_SetPin_Direction+0xa0>
 3b0:	28 f0       	brcs	.+10     	; 0x3bc <DIO_SetPin_Direction+0x8a>
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	c9 f0       	breq	.+50     	; 0x3e8 <DIO_SetPin_Direction+0xb6>
 3b6:	83 30       	cpi	r24, 0x03	; 3
 3b8:	11 f1       	breq	.+68     	; 0x3fe <DIO_SetPin_Direction+0xcc>
 3ba:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 3bc:	2a b3       	in	r18, 0x1a	; 26
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_SetPin_Direction+0x96>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_SetPin_Direction+0x92>
 3cc:	82 2b       	or	r24, r18
 3ce:	8a bb       	out	0x1a, r24	; 26
			break;
 3d0:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 3d2:	27 b3       	in	r18, 0x17	; 23
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_SetPin_Direction+0xac>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_SetPin_Direction+0xa8>
 3e2:	82 2b       	or	r24, r18
 3e4:	87 bb       	out	0x17, r24	; 23
			break;
 3e6:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 3e8:	24 b3       	in	r18, 0x14	; 20
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_SetPin_Direction+0xc2>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_SetPin_Direction+0xbe>
 3f8:	82 2b       	or	r24, r18
 3fa:	84 bb       	out	0x14, r24	; 20
			break;
 3fc:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 3fe:	21 b3       	in	r18, 0x11	; 17
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	82 2b       	or	r24, r18
 410:	81 bb       	out	0x11, r24	; 17
 412:	08 95       	ret

00000414 <DIO_SetPin_State>:
		break;
	}
}
void DIO_SetPin_State(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	switch (state)
 414:	44 23       	and	r20, r20
 416:	19 f0       	breq	.+6      	; 0x41e <DIO_SetPin_State+0xa>
 418:	41 30       	cpi	r20, 0x01	; 1
 41a:	c9 f1       	breq	.+114    	; 0x48e <DIO_SetPin_State+0x7a>
 41c:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	91 f0       	breq	.+36     	; 0x446 <DIO_SetPin_State+0x32>
 422:	28 f0       	brcs	.+10     	; 0x42e <DIO_SetPin_State+0x1a>
 424:	82 30       	cpi	r24, 0x02	; 2
 426:	d9 f0       	breq	.+54     	; 0x45e <DIO_SetPin_State+0x4a>
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	29 f1       	breq	.+74     	; 0x476 <DIO_SetPin_State+0x62>
 42c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 42e:	2b b3       	in	r18, 0x1b	; 27
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_SetPin_State+0x26>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_SetPin_State+0x22>
 43e:	80 95       	com	r24
 440:	82 23       	and	r24, r18
 442:	8b bb       	out	0x1b, r24	; 27
			break;
 444:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 446:	28 b3       	in	r18, 0x18	; 24
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_SetPin_State+0x3e>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	6a 95       	dec	r22
 454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_SetPin_State+0x3a>
 456:	80 95       	com	r24
 458:	82 23       	and	r24, r18
 45a:	88 bb       	out	0x18, r24	; 24
			break;
 45c:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 45e:	25 b3       	in	r18, 0x15	; 21
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_SetPin_State+0x56>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_SetPin_State+0x52>
 46e:	80 95       	com	r24
 470:	82 23       	and	r24, r18
 472:	85 bb       	out	0x15, r24	; 21
			break;
 474:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 476:	22 b3       	in	r18, 0x12	; 18
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_SetPin_State+0x6e>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_SetPin_State+0x6a>
 486:	80 95       	com	r24
 488:	82 23       	and	r24, r18
 48a:	82 bb       	out	0x12, r24	; 18
			break;
 48c:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	89 f0       	breq	.+34     	; 0x4b4 <DIO_SetPin_State+0xa0>
 492:	28 f0       	brcs	.+10     	; 0x49e <DIO_SetPin_State+0x8a>
 494:	82 30       	cpi	r24, 0x02	; 2
 496:	c9 f0       	breq	.+50     	; 0x4ca <DIO_SetPin_State+0xb6>
 498:	83 30       	cpi	r24, 0x03	; 3
 49a:	11 f1       	breq	.+68     	; 0x4e0 <DIO_SetPin_State+0xcc>
 49c:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 49e:	2b b3       	in	r18, 0x1b	; 27
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_SetPin_State+0x96>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_SetPin_State+0x92>
 4ae:	82 2b       	or	r24, r18
 4b0:	8b bb       	out	0x1b, r24	; 27
			break;
 4b2:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 4b4:	28 b3       	in	r18, 0x18	; 24
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_SetPin_State+0xac>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	6a 95       	dec	r22
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_SetPin_State+0xa8>
 4c4:	82 2b       	or	r24, r18
 4c6:	88 bb       	out	0x18, r24	; 24
			break;
 4c8:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 4ca:	25 b3       	in	r18, 0x15	; 21
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_SetPin_State+0xc2>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_SetPin_State+0xbe>
 4da:	82 2b       	or	r24, r18
 4dc:	85 bb       	out	0x15, r24	; 21
			break;
 4de:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 4e0:	22 b3       	in	r18, 0x12	; 18
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_SetPin_State+0xd8>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_SetPin_State+0xd4>
 4f0:	82 2b       	or	r24, r18
 4f2:	82 bb       	out	0x12, r24	; 18
 4f4:	08 95       	ret

000004f6 <DIO_TglPin_State>:
		break;
	}
}
void DIO_TglPin_State(DIO_Port port, DIO_Pin pin)
{
	switch(port)
 4f6:	81 30       	cpi	r24, 0x01	; 1
 4f8:	89 f0       	breq	.+34     	; 0x51c <DIO_TglPin_State+0x26>
 4fa:	28 f0       	brcs	.+10     	; 0x506 <DIO_TglPin_State+0x10>
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	c9 f0       	breq	.+50     	; 0x532 <DIO_TglPin_State+0x3c>
 500:	83 30       	cpi	r24, 0x03	; 3
 502:	11 f1       	breq	.+68     	; 0x548 <DIO_TglPin_State+0x52>
 504:	08 95       	ret
	{
		case DIO_PORTA:
		TGL_BIT(PORTA, pin);
 506:	2b b3       	in	r18, 0x1b	; 27
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_TglPin_State+0x1c>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_TglPin_State+0x18>
 516:	82 27       	eor	r24, r18
 518:	8b bb       	out	0x1b, r24	; 27
		break;
 51a:	08 95       	ret
		case DIO_PORTB:
		TGL_BIT(PORTB, pin);
 51c:	28 b3       	in	r18, 0x18	; 24
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_TglPin_State+0x32>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_TglPin_State+0x2e>
 52c:	82 27       	eor	r24, r18
 52e:	88 bb       	out	0x18, r24	; 24
		break;
 530:	08 95       	ret
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
 532:	25 b3       	in	r18, 0x15	; 21
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_TglPin_State+0x48>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_TglPin_State+0x44>
 542:	82 27       	eor	r24, r18
 544:	85 bb       	out	0x15, r24	; 21
		break;
 546:	08 95       	ret
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
 548:	22 b3       	in	r18, 0x12	; 18
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_TglPin_State+0x5e>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_TglPin_State+0x5a>
 558:	82 27       	eor	r24, r18
 55a:	82 bb       	out	0x12, r24	; 18
 55c:	08 95       	ret

0000055e <SPI_Init>:
{
	SET_BIT(SPCR, SPE);
	CLR_BIT(PORTB, 4);
	SPDR = Data;
	while (GET_BIT(SPSR, SPIF) != 1);
}
 55e:	6f 98       	cbi	0x0d, 7	; 13
 560:	bc 98       	cbi	0x17, 4	; 23
 562:	bd 98       	cbi	0x17, 5	; 23
 564:	be 9a       	sbi	0x17, 6	; 23
 566:	bf 98       	cbi	0x17, 7	; 23
 568:	6c 98       	cbi	0x0d, 4	; 13
 56a:	6d 9a       	sbi	0x0d, 5	; 13
 56c:	69 9a       	sbi	0x0d, 1	; 13
 56e:	68 9a       	sbi	0x0d, 0	; 13
 570:	08 95       	ret

00000572 <SPI_Recieve>:
uint8_t	SPI_Recieve(void)
{
	SET_BIT(SPCR, SPE);
 572:	6e 9a       	sbi	0x0d, 6	; 13
	while (GET_BIT(SPSR, SPIF) != 1);
 574:	77 9b       	sbis	0x0e, 7	; 14
 576:	fe cf       	rjmp	.-4      	; 0x574 <SPI_Recieve+0x2>
	return SPDR;
 578:	8f b1       	in	r24, 0x0f	; 15
 57a:	08 95       	ret

0000057c <_exit>:
 57c:	f8 94       	cli

0000057e <__stop_program>:
 57e:	ff cf       	rjmp	.-2      	; 0x57e <__stop_program>
