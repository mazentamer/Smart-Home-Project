
FinalProject_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000004e8  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007a  0080007a  00000596  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000596  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ac  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098a  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a34  00000000  00000000  00002342  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055f  00000000  00000000  00002f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000529  00000000  00000000  00003487  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000039b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

uint8_t byteRecieved = 0; //to receive data sent by bluetooth

int main(void)
{
    USART_Init(); //Initialize UART with baud rate of 9600 
  92:	0e 94 42 02 	call	0x484	; 0x484 <USART_Init>
	SPI_Init();	//Initialize SPI as master
  96:	0e 94 32 02 	call	0x464	; 0x464 <SPI_Init>
	LCD_Init(); //LCD to check for data sent by bluetooth
  9a:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_Init>
	while (1) 
    {
		USART_Receive(&byteRecieved);
  9e:	8a e7       	ldi	r24, 0x7A	; 122
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <USART_Receive>
		if (byteRecieved != 0)
  a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
  aa:	88 23       	and	r24, r24
  ac:	69 f0       	breq	.+26     	; 0xc8 <main+0x36>
		{
			LCD_CLEAR();
  ae:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_CLEAR>
			SPI_Send(byteRecieved);
  b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
  b6:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_Send>
			LCD_WRITE_STR("BT Data OK");
  ba:	80 e6       	ldi	r24, 0x60	; 96
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_WRITE_STR>
			byteRecieved = 0;
  c2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
  c6:	eb cf       	rjmp	.-42     	; 0x9e <main+0xc>
		}
		else
		{
			LCD_CLEAR();
  c8:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_CLEAR>
			LCD_WRITE_STR("BT Data Not OK");
  cc:	8b e6       	ldi	r24, 0x6B	; 107
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_WRITE_STR>
  d4:	e4 cf       	rjmp	.-56     	; 0x9e <main+0xc>

000000d6 <LCD_WRITE_CMD>:
void LCD_WRITE_NBR(uint32_t numbr)
{
	uint8_t num[10];
	ltoa(numbr, (uint8_t*)num, 10);//Long to Ascii
	LCD_WRITE_STR(num);
}
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	62 e0       	ldi	r22, 0x02	; 2
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	63 e0       	ldi	r22, 0x03	; 3
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	9c 2f       	mov	r25, r28
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	89 2b       	or	r24, r25
 102:	8b bb       	out	0x1b, r24	; 27
 104:	41 e0       	ldi	r20, 0x01	; 1
 106:	63 e0       	ldi	r22, 0x03	; 3
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
 10e:	8f e9       	ldi	r24, 0x9F	; 159
 110:	9f e0       	ldi	r25, 0x0F	; 15
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_WRITE_CMD+0x3c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_WRITE_CMD+0x42>
 118:	00 00       	nop
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	63 e0       	ldi	r22, 0x03	; 3
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
 124:	2b b3       	in	r18, 0x1b	; 27
 126:	30 e1       	ldi	r19, 0x10	; 16
 128:	c3 9f       	mul	r28, r19
 12a:	c0 01       	movw	r24, r0
 12c:	11 24       	eor	r1, r1
 12e:	92 2f       	mov	r25, r18
 130:	9f 70       	andi	r25, 0x0F	; 15
 132:	89 2b       	or	r24, r25
 134:	8b bb       	out	0x1b, r24	; 27
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	63 e0       	ldi	r22, 0x03	; 3
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
 140:	8f e9       	ldi	r24, 0x9F	; 159
 142:	9f e0       	ldi	r25, 0x0F	; 15
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_WRITE_CMD+0x6e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_WRITE_CMD+0x74>
 14a:	00 00       	nop
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	63 e0       	ldi	r22, 0x03	; 3
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
 156:	8f e3       	ldi	r24, 0x3F	; 63
 158:	9f e1       	ldi	r25, 0x1F	; 31
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_WRITE_CMD+0x84>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_WRITE_CMD+0x8a>
 160:	00 00       	nop
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <LCD_Init>:
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_SetPin_Direction>
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_SetPin_Direction>
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	63 e0       	ldi	r22, 0x03	; 3
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_SetPin_Direction>
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	64 e0       	ldi	r22, 0x04	; 4
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_SetPin_Direction>
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	65 e0       	ldi	r22, 0x05	; 5
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_SetPin_Direction>
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	66 e0       	ldi	r22, 0x06	; 6
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_SetPin_Direction>
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	67 e0       	ldi	r22, 0x07	; 7
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_SetPin_Direction>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	81 ee       	ldi	r24, 0xE1	; 225
 1b0:	94 e0       	ldi	r25, 0x04	; 4
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <LCD_Init+0x4c>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_Init+0x56>
 1bc:	00 00       	nop
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WRITE_CMD>
 1c4:	83 e3       	ldi	r24, 0x33	; 51
 1c6:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WRITE_CMD>
 1ca:	82 e3       	ldi	r24, 0x32	; 50
 1cc:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WRITE_CMD>
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WRITE_CMD>
 1d6:	8c e0       	ldi	r24, 0x0C	; 12
 1d8:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WRITE_CMD>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WRITE_CMD>
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WRITE_CMD>
 1e8:	08 95       	ret

000001ea <LCD_WRITE_DTA>:
 1ea:	cf 93       	push	r28
 1ec:	c8 2f       	mov	r28, r24
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	62 e0       	ldi	r22, 0x02	; 2
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	63 e0       	ldi	r22, 0x03	; 3
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
 20c:	8b b3       	in	r24, 0x1b	; 27
 20e:	9c 2f       	mov	r25, r28
 210:	90 7f       	andi	r25, 0xF0	; 240
 212:	8f 70       	andi	r24, 0x0F	; 15
 214:	89 2b       	or	r24, r25
 216:	8b bb       	out	0x1b, r24	; 27
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	63 e0       	ldi	r22, 0x03	; 3
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
 222:	8f e9       	ldi	r24, 0x9F	; 159
 224:	9f e0       	ldi	r25, 0x0F	; 15
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD_WRITE_DTA+0x3c>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_WRITE_DTA+0x42>
 22c:	00 00       	nop
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	63 e0       	ldi	r22, 0x03	; 3
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
 238:	2b b3       	in	r18, 0x1b	; 27
 23a:	30 e1       	ldi	r19, 0x10	; 16
 23c:	c3 9f       	mul	r28, r19
 23e:	c0 01       	movw	r24, r0
 240:	11 24       	eor	r1, r1
 242:	92 2f       	mov	r25, r18
 244:	9f 70       	andi	r25, 0x0F	; 15
 246:	89 2b       	or	r24, r25
 248:	8b bb       	out	0x1b, r24	; 27
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	63 e0       	ldi	r22, 0x03	; 3
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
 254:	8f e9       	ldi	r24, 0x9F	; 159
 256:	9f e0       	ldi	r25, 0x0F	; 15
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_WRITE_DTA+0x6e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_WRITE_DTA+0x74>
 25e:	00 00       	nop
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	63 e0       	ldi	r22, 0x03	; 3
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_SetPin_State>
 26a:	8f e3       	ldi	r24, 0x3F	; 63
 26c:	9f e1       	ldi	r25, 0x1F	; 31
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_WRITE_DTA+0x84>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_WRITE_DTA+0x8a>
 274:	00 00       	nop
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <LCD_WRITE_STR>:
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
 280:	88 81       	ld	r24, Y
 282:	88 23       	and	r24, r24
 284:	31 f0       	breq	.+12     	; 0x292 <LCD_WRITE_STR+0x18>
 286:	21 96       	adiw	r28, 0x01	; 1
 288:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_WRITE_DTA>
 28c:	89 91       	ld	r24, Y+
 28e:	81 11       	cpse	r24, r1
 290:	fb cf       	rjmp	.-10     	; 0x288 <LCD_WRITE_STR+0xe>
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <LCD_CLEAR>:
void LCD_CLEAR(void)/*Clear data display on screen*/
{
	LCD_WRITE_CMD(0x01);
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WRITE_CMD>
 29e:	08 95       	ret

000002a0 <DIO_SetPin_Direction>:

#include "DIO.h"

void DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_Direction direction)
{
	switch (direction)
 2a0:	44 23       	and	r20, r20
 2a2:	19 f0       	breq	.+6      	; 0x2aa <DIO_SetPin_Direction+0xa>
 2a4:	41 30       	cpi	r20, 0x01	; 1
 2a6:	c9 f1       	breq	.+114    	; 0x31a <DIO_SetPin_Direction+0x7a>
 2a8:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	91 f0       	breq	.+36     	; 0x2d2 <DIO_SetPin_Direction+0x32>
 2ae:	28 f0       	brcs	.+10     	; 0x2ba <DIO_SetPin_Direction+0x1a>
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	d9 f0       	breq	.+54     	; 0x2ea <DIO_SetPin_Direction+0x4a>
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	29 f1       	breq	.+74     	; 0x302 <DIO_SetPin_Direction+0x62>
 2b8:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
 2ba:	2a b3       	in	r18, 0x1a	; 26
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_SetPin_Direction+0x26>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_SetPin_Direction+0x22>
 2ca:	80 95       	com	r24
 2cc:	82 23       	and	r24, r18
 2ce:	8a bb       	out	0x1a, r24	; 26
			break;
 2d0:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
 2d2:	27 b3       	in	r18, 0x17	; 23
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_SetPin_Direction+0x3e>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_SetPin_Direction+0x3a>
 2e2:	80 95       	com	r24
 2e4:	82 23       	and	r24, r18
 2e6:	87 bb       	out	0x17, r24	; 23
			break;
 2e8:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
 2ea:	24 b3       	in	r18, 0x14	; 20
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_SetPin_Direction+0x56>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_SetPin_Direction+0x52>
 2fa:	80 95       	com	r24
 2fc:	82 23       	and	r24, r18
 2fe:	84 bb       	out	0x14, r24	; 20
			break;
 300:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 302:	21 b3       	in	r18, 0x11	; 17
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_SetPin_Direction+0x6e>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_SetPin_Direction+0x6a>
 312:	80 95       	com	r24
 314:	82 23       	and	r24, r18
 316:	81 bb       	out	0x11, r24	; 17
			break;
 318:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	89 f0       	breq	.+34     	; 0x340 <DIO_SetPin_Direction+0xa0>
 31e:	28 f0       	brcs	.+10     	; 0x32a <DIO_SetPin_Direction+0x8a>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	c9 f0       	breq	.+50     	; 0x356 <DIO_SetPin_Direction+0xb6>
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	11 f1       	breq	.+68     	; 0x36c <DIO_SetPin_Direction+0xcc>
 328:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 32a:	2a b3       	in	r18, 0x1a	; 26
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_SetPin_Direction+0x96>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_SetPin_Direction+0x92>
 33a:	82 2b       	or	r24, r18
 33c:	8a bb       	out	0x1a, r24	; 26
			break;
 33e:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 340:	27 b3       	in	r18, 0x17	; 23
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_SetPin_Direction+0xac>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_SetPin_Direction+0xa8>
 350:	82 2b       	or	r24, r18
 352:	87 bb       	out	0x17, r24	; 23
			break;
 354:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 356:	24 b3       	in	r18, 0x14	; 20
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_SetPin_Direction+0xc2>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_SetPin_Direction+0xbe>
 366:	82 2b       	or	r24, r18
 368:	84 bb       	out	0x14, r24	; 20
			break;
 36a:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 36c:	21 b3       	in	r18, 0x11	; 17
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_SetPin_Direction+0xd8>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_SetPin_Direction+0xd4>
 37c:	82 2b       	or	r24, r18
 37e:	81 bb       	out	0x11, r24	; 17
 380:	08 95       	ret

00000382 <DIO_SetPin_State>:
		break;
	}
}
void DIO_SetPin_State(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	switch (state)
 382:	44 23       	and	r20, r20
 384:	19 f0       	breq	.+6      	; 0x38c <DIO_SetPin_State+0xa>
 386:	41 30       	cpi	r20, 0x01	; 1
 388:	c9 f1       	breq	.+114    	; 0x3fc <DIO_SetPin_State+0x7a>
 38a:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	91 f0       	breq	.+36     	; 0x3b4 <DIO_SetPin_State+0x32>
 390:	28 f0       	brcs	.+10     	; 0x39c <DIO_SetPin_State+0x1a>
 392:	82 30       	cpi	r24, 0x02	; 2
 394:	d9 f0       	breq	.+54     	; 0x3cc <DIO_SetPin_State+0x4a>
 396:	83 30       	cpi	r24, 0x03	; 3
 398:	29 f1       	breq	.+74     	; 0x3e4 <DIO_SetPin_State+0x62>
 39a:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 39c:	2b b3       	in	r18, 0x1b	; 27
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_SetPin_State+0x26>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_SetPin_State+0x22>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	8b bb       	out	0x1b, r24	; 27
			break;
 3b2:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 3b4:	28 b3       	in	r18, 0x18	; 24
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_SetPin_State+0x3e>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_SetPin_State+0x3a>
 3c4:	80 95       	com	r24
 3c6:	82 23       	and	r24, r18
 3c8:	88 bb       	out	0x18, r24	; 24
			break;
 3ca:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 3cc:	25 b3       	in	r18, 0x15	; 21
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_SetPin_State+0x56>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_SetPin_State+0x52>
 3dc:	80 95       	com	r24
 3de:	82 23       	and	r24, r18
 3e0:	85 bb       	out	0x15, r24	; 21
			break;
 3e2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 3e4:	22 b3       	in	r18, 0x12	; 18
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_SetPin_State+0x6e>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_SetPin_State+0x6a>
 3f4:	80 95       	com	r24
 3f6:	82 23       	and	r24, r18
 3f8:	82 bb       	out	0x12, r24	; 18
			break;
 3fa:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	89 f0       	breq	.+34     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 400:	28 f0       	brcs	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	c9 f0       	breq	.+50     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 406:	83 30       	cpi	r24, 0x03	; 3
 408:	11 f1       	breq	.+68     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 40a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 40c:	2b b3       	in	r18, 0x1b	; 27
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	82 2b       	or	r24, r18
 41e:	8b bb       	out	0x1b, r24	; 27
			break;
 420:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 422:	28 b3       	in	r18, 0x18	; 24
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	82 2b       	or	r24, r18
 434:	88 bb       	out	0x18, r24	; 24
			break;
 436:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 438:	25 b3       	in	r18, 0x15	; 21
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 448:	82 2b       	or	r24, r18
 44a:	85 bb       	out	0x15, r24	; 21
			break;
 44c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 44e:	22 b3       	in	r18, 0x12	; 18
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 45e:	82 2b       	or	r24, r18
 460:	82 bb       	out	0x12, r24	; 18
 462:	08 95       	ret

00000464 <SPI_Init>:

void SPI_Init(void)
{
	#if SPI_INT_MODE == SPI_INT_OFF

		CLR_BIT(SPCR, SPIE);
 464:	6f 98       	cbi	0x0d, 7	; 13
	
	#endif
	
	#if SPI_M_OR_S == SPI_MASTER
		
		SET_BIT(DDRB,4);SET_BIT(DDRB, 5); CLR_BIT(DDRB,6); SET_BIT(DDRB, 7);
 466:	bc 9a       	sbi	0x17, 4	; 23
 468:	bd 9a       	sbi	0x17, 5	; 23
 46a:	be 98       	cbi	0x17, 6	; 23
 46c:	bf 9a       	sbi	0x17, 7	; 23
		SET_BIT(SPCR, MSTR);
 46e:	6c 9a       	sbi	0x0d, 4	; 13
	
	#endif
	
	#if SPI_DORD == SPI_DORD_LSB

		SET_BIT(SPCR, DORD);
 470:	6d 9a       	sbi	0x0d, 5	; 13
	
	#warning "Wrong mode selection"
	
	#endif
	
	SET_BIT(SPCR, SPR1);SET_BIT(SPCR, SPR0);
 472:	69 9a       	sbi	0x0d, 1	; 13
 474:	68 9a       	sbi	0x0d, 0	; 13
 476:	08 95       	ret

00000478 <SPI_Send>:
}
void SPI_Send(uint8_t Data)
{
	SET_BIT(SPCR, SPE);
 478:	6e 9a       	sbi	0x0d, 6	; 13
	CLR_BIT(PORTB, 4);
 47a:	c4 98       	cbi	0x18, 4	; 24
	SPDR = Data;
 47c:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR, SPIF) != 1);
 47e:	77 9b       	sbis	0x0e, 7	; 14
 480:	fe cf       	rjmp	.-4      	; 0x47e <SPI_Send+0x6>
}
 482:	08 95       	ret

00000484 <USART_Init>:
}
void USART_Transmit(uint8_t Data)
{
	UDR = Data;
	while (GET_BIT(UCSRA, TXC) != 1);
}
 484:	57 98       	cbi	0x0a, 7	; 10
 486:	56 98       	cbi	0x0a, 6	; 10
 488:	55 98       	cbi	0x0a, 5	; 10
 48a:	54 9a       	sbi	0x0a, 4	; 10
 48c:	53 9a       	sbi	0x0a, 3	; 10
 48e:	80 b5       	in	r24, 0x20	; 32
 490:	80 68       	ori	r24, 0x80	; 128
 492:	80 bd       	out	0x20, r24	; 32
 494:	52 98       	cbi	0x0a, 2	; 10
 496:	80 b5       	in	r24, 0x20	; 32
 498:	84 60       	ori	r24, 0x04	; 4
 49a:	80 bd       	out	0x20, r24	; 32
 49c:	80 b5       	in	r24, 0x20	; 32
 49e:	82 60       	ori	r24, 0x02	; 2
 4a0:	80 bd       	out	0x20, r24	; 32
 4a2:	80 b5       	in	r24, 0x20	; 32
 4a4:	80 68       	ori	r24, 0x80	; 128
 4a6:	80 bd       	out	0x20, r24	; 32
 4a8:	80 b5       	in	r24, 0x20	; 32
 4aa:	8f 7b       	andi	r24, 0xBF	; 191
 4ac:	80 bd       	out	0x20, r24	; 32
 4ae:	80 b5       	in	r24, 0x20	; 32
 4b0:	80 68       	ori	r24, 0x80	; 128
 4b2:	80 bd       	out	0x20, r24	; 32
 4b4:	80 b5       	in	r24, 0x20	; 32
 4b6:	8f 7d       	andi	r24, 0xDF	; 223
 4b8:	80 bd       	out	0x20, r24	; 32
 4ba:	80 b5       	in	r24, 0x20	; 32
 4bc:	8f 7e       	andi	r24, 0xEF	; 239
 4be:	80 bd       	out	0x20, r24	; 32
 4c0:	80 b5       	in	r24, 0x20	; 32
 4c2:	80 68       	ori	r24, 0x80	; 128
 4c4:	80 bd       	out	0x20, r24	; 32
 4c6:	80 b5       	in	r24, 0x20	; 32
 4c8:	87 7f       	andi	r24, 0xF7	; 247
 4ca:	80 bd       	out	0x20, r24	; 32
 4cc:	87 e6       	ldi	r24, 0x67	; 103
 4ce:	89 b9       	out	0x09, r24	; 9
 4d0:	10 bc       	out	0x20, r1	; 32
 4d2:	88 98       	cbi	0x11, 0	; 17
 4d4:	89 9a       	sbi	0x11, 1	; 17
 4d6:	08 95       	ret

000004d8 <USART_Receive>:
void USART_Receive(uint8_t* Data)
{
	while (GET_BIT(UCSRA, RXC) != 1);
 4d8:	5f 9b       	sbis	0x0b, 7	; 11
 4da:	fe cf       	rjmp	.-4      	; 0x4d8 <USART_Receive>
	*Data = UDR;
 4dc:	2c b1       	in	r18, 0x0c	; 12
 4de:	fc 01       	movw	r30, r24
 4e0:	20 83       	st	Z, r18
 4e2:	08 95       	ret

000004e4 <_exit>:
 4e4:	f8 94       	cli

000004e6 <__stop_program>:
 4e6:	ff cf       	rjmp	.-2      	; 0x4e6 <__stop_program>
